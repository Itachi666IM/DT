"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rsaLengthRsaPublicKey = exports.rsaLengthPublicKey = exports.coerceRsaPublicKeyPem = exports.coercePublicKeyPem = exports.toPem2 = exports.rsaLengthPrivateKey = exports.coercePrivateKeyPem = void 0;
var assert_1 = __importDefault(require("assert"));
var crypto = __importStar(require("crypto"));
var createPrivateKey = crypto.createPrivateKey;
var crypto_utils_js_1 = require("./crypto_utils.js");
var coerce_private_key_js_1 = require("./x509/coerce_private_key.js");
var jsrsasign = require("jsrsasign");
function coercePrivateKeyPem(privateKey) {
    if (privateKey instanceof Buffer) {
        var o = createPrivateKey({ key: privateKey, format: "der", type: "pkcs1" });
        var e = o.export({ format: "der", type: "pkcs1" });
        privateKey = (0, crypto_utils_js_1.toPem)(e, "RSA PRIVATE KEY");
    }
    (0, assert_1.default)(typeof privateKey === "string");
    return privateKey;
}
exports.coercePrivateKeyPem = coercePrivateKeyPem;
function rsaLengthPrivateKey(key) {
    key = (0, coerce_private_key_js_1.coercePrivateKey)(key);
    var key2 = key.export({ type: "pkcs1", format: "pem" }).toString();
    var a = jsrsasign.KEYUTIL.getKey(key2);
    return a.n.toString(16).length / 2;
}
exports.rsaLengthPrivateKey = rsaLengthPrivateKey;
function toPem2(raw_key, pem) {
    (0, assert_1.default)(raw_key, "expecting a key");
    (0, assert_1.default)(typeof pem === "string");
    if (raw_key instanceof crypto.KeyObject) {
        if (pem === "RSA PRIVATE KEY") {
            return raw_key.export({ format: "pem", type: "pkcs1" }).toString();
        }
        else if (pem === "PRIVATE KEY") {
            return raw_key.export({ format: "pem", type: "pkcs8" }).toString();
        }
        else {
            throw new Error("Unsupported case!");
        }
    }
    return (0, crypto_utils_js_1.toPem)(raw_key, pem);
}
exports.toPem2 = toPem2;
function coercePublicKeyPem(publicKey) {
    if (publicKey instanceof crypto.KeyObject) {
        return publicKey.export({ format: "pem", type: "spki" }).toString();
    }
    (0, assert_1.default)(typeof publicKey === "string");
    return publicKey;
}
exports.coercePublicKeyPem = coercePublicKeyPem;
function coerceRsaPublicKeyPem(publicKey) {
    if (publicKey instanceof crypto.KeyObject) {
        return publicKey.export({ format: "pem", type: "spki" }).toString();
    }
    (0, assert_1.default)(typeof publicKey === "string");
    return publicKey;
}
exports.coerceRsaPublicKeyPem = coerceRsaPublicKeyPem;
function rsaLengthPublicKey(key) {
    key = coercePublicKeyPem(key);
    (0, assert_1.default)(typeof key === "string");
    var a = jsrsasign.KEYUTIL.getKey(key);
    return a.n.toString(16).length / 2;
}
exports.rsaLengthPublicKey = rsaLengthPublicKey;
function rsaLengthRsaPublicKey(key) {
    key = coerceRsaPublicKeyPem(key);
    (0, assert_1.default)(typeof key === "string");
    var a = jsrsasign.KEYUTIL.getKey(key);
    return a.n.toString(16).length / 2;
}
exports.rsaLengthRsaPublicKey = rsaLengthRsaPublicKey;
//# sourceMappingURL=crypto_utils2.js.map