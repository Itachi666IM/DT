<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/static/DT_home.css">
    <script src="/socket.io/socket.io.js"></script>
    <title>Digital Twin Tool Home</title>
</head>
<body>
    <header>Register Devices and Instruments</header>
    <div id="treecon"></div>
    <form action="/ninfo" method="post">
    <input type="hidden" name="ftree" id="ftree">
    <button type="submit" class="btn" id="fsub">Submit</button>
    </form>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const finalTreeData = document.getElementById('ftree');
            let NodeArray = [];
            const socket = io();

            socket.on('connect', () => {
                console.log("Connected");
            })

            socket.on("Node Names", (nodeNames) => {
                console.log("Data is being sent");
                console.log("Received Node Names:", nodeNames);

            fetch('/treeData') // Assuming this is the endpoint you defined
                .then((response) => response.json())
                .then((treeData) => {
                    console.log('Received Tree Data:', treeData);

                    const treeContainer = document.getElementById('treecon');
                    renderComponentNames(treeData, treeContainer);
                })
                .catch((error) => {
                    console.error('Error fetching tree data:', error);
                });

            function renderComponentNames(node, container) {
                const componentDiv = document.createElement('div');
                componentDiv.classList.add('component');
                componentDiv.textContent = node._name;

                const addButton = document.createElement("button");
                addButton.textContent = "Add Node";
                addButton.classList.add("btn");
                componentDiv.appendChild(addButton);
                container.appendChild(componentDiv);

                addButton.addEventListener("click",()=>{
                    createDropdown(node,componentDiv);
                })

                function createDropdown(node,container){

                const componentDropdown = document.createElement('select');
                componentDropdown.classList.add('dropdown');
                const componentName = document.createElement("div");
                for(const node of nodeNames)
                {
                    const option = document.createElement("option");
                    option.textContent = node;
                    option.value = node;
                    componentDropdown.appendChild(option);
                }
                container.appendChild(componentDropdown);
                container.appendChild(componentName);

                componentDropdown.addEventListener("change",(e)=>{
                    const nodeName = e.target.value;
                    const obj = {
                            name: node._name,
                            componentNode: nodeName,
                            
                        };
                    NodeArray.push(obj);
                    displayNodeInfo(nodeName);
                })

                function displayNodeInfo(selectedNodeName) {
                        componentName.textContent = `You selected: ${selectedNodeName}`;
                        componentDropdown.classList.add("hidden");
                        
                    }
                }

                for (const component of node._components) {
                    renderComponentNames(component, container);
                }
            }
                
            });

            const submitButton = document.getElementById('fsub');
            submitButton.addEventListener("click",()=>{
                finalTreeData.value = JSON.stringify(NodeArray);
                alert('Nodes registered!');
            })
        });
    </script>
</body>
</html>